// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Page {
  id          Int          @id @default(autoincrement())
  name        String
  link        String?
  type        PageType
  RoleOnPage  RoleOnPage[]
  active      Boolean      @default(true)
  PageGroup   PageGroup?   @relation(fields: [pageGroupId], references: [id])
  pageGroupId Int?
}

model Company {
  id              Int               @id @default(autoincrement())
  companyId       String            @unique @default(uuid())
  name            String
  code            String?
  gstNo           String?
  panNo           String?
  contactName     String?
  contactMobile   BigInt
  contactEmail    String?
  branch          Branch[]
  country         Country[]
  active          Boolean           @default(true)
  Department      Department[]
  Role            Role[]
  Subscription    Subscription[]
  finYear         FinYear[]
  PartyCategory   PartyCategory[]
  Party           Party[]
  ProductBrand    ProductBrand[]
  ProductCategory ProductCategory[]
  Product         Product[]
  PurchaseBill    PurchaseBill[]
  SalesBill       SalesBill[]
  PurchaseReturn  PurchaseReturn[]
  SalesReturn     SalesReturn[]
  Uom             Uom[]
  LeadCategories  LeadCategories[]
}

model Subscription {
  id        Int      @id @default(autoincrement())
  Company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int
  validFrom DateTime
  expireAt  DateTime
  code      String
  maxUsers  Int
}

model Branch {
  id               Int                @id @default(autoincrement())
  branchName       String
  branchCode       String?
  contactName      String?
  contactMobile    BigInt
  contactEmail     String?
  address          String?            @default("")
  company          Company            @relation(fields: [companyId], references: [id])
  companyId        Int
  active           Boolean            @default(true)
  EmployeeCategory EmployeeCategory[]
  UserOnBranch     UserOnBranch[]
  Employee         Employee[]
  idPrefix         String?
  idSequence       String?
  tempPrefix       String?
  tempSequence     String?
  prefixCategory   PrefixCategory?
}

model UserOnBranch {
  id       Int    @id @default(autoincrement())
  Branch   Branch @relation(fields: [branchId], references: [id])
  branchId Int
  User     User   @relation(fields: [userId], references: [id])
  userId   Int
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String
  company     Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   Int
  User        User[]
  RoleOnPage  RoleOnPage[]
  active      Boolean      @default(true)
  defaultRole Boolean      @default(false)

  @@unique([companyId, name])
}

model RoleOnPage {
  id     Int     @id @default(autoincrement())
  role   Role    @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId Int
  page   Page    @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId Int
  read   Boolean @default(false)
  create Boolean @default(false)
  edit   Boolean @default(false)
  delete Boolean @default(false)

  @@unique([roleId, pageId])
}

model User {
  id             Int            @id @default(autoincrement())
  username       String         @unique
  email          String?
  Employee       Employee?      @relation(fields: [employeeId], references: [id])
  password       String
  role           Role?          @relation(fields: [roleId], references: [id])
  roleId         Int?
  otp            String?
  active         Boolean        @default(true)
  UserOnBranch   UserOnBranch[]
  employeeId     Int?
  partyCreatedBy Party[]        @relation(name: "createdBy")
  partyUpdatedBy Party[]        @relation(name: "updatedBy")
}

model Employee {
  id                 Int               @id @default(autoincrement())
  name               String
  email              String            @unique
  regNo              String            @unique
  chamberNo          String
  department         Department?       @relation(fields: [departmentId], references: [id])
  departmentId       Int?
  joiningDate        DateTime
  fatherName         String?
  dob                DateTime?
  gender             Gender?
  maritalStatus      MaritalStatus?
  bloodGroup         BloodGroup?
  panNo              String?
  consultFee         String?
  salaryPerMonth     String
  commissionCharges  String?
  mobile             BigInt?
  accountNo          String?
  ifscNo             String?
  branchName         String?
  degree             String?
  specialization     String?
  localAddress       String?
  localCity          City              @relation("localCity", fields: [localCityId], references: [id])
  localCityId        Int
  localPincode       Int?
  permAddress        String?
  permCity           City?             @relation("permCity", fields: [permCityId], references: [id])
  permCityId         Int?
  permPincode        Int?
  active             Boolean           @default(true)
  image              Bytes?            @db.LongBlob
  Branch             Branch?           @relation(fields: [branchId], references: [id])
  branchId           Int?
  EmployeeCategory   EmployeeCategory? @relation(fields: [employeeCategoryId], references: [id])
  employeeCategoryId Int?
  permanent          Boolean           @default(false)
  leavingReason      String?
  leavingDate        DateTime?
  canRejoin          Boolean           @default(true)
  rejoinReason       String?
  User               User[]
}

model FinYear {
  id        Int      @id @default(autoincrement())
  from      DateTime
  to        DateTime
  Company   Company? @relation(fields: [companyId], references: [id])
  companyId Int?
  active    Boolean  @default(true)
}

model EmployeeCategory {
  id              Int        @id @default(autoincrement())
  name            String
  code            String
  Branch          Branch?    @relation(fields: [branchId], references: [id])
  branchId        Int?
  active          Boolean    @default(true)
  defaultCategory Boolean    @default(false)
  Employee        Employee[]
  empId           Int?
}

model Country {
  id        Int     @id @default(autoincrement())
  name      String
  code      String
  state     State[]
  active    Boolean @default(true)
  Company   Company @relation(fields: [companyId], references: [id])
  companyId Int
}

model State {
  id        Int     @id @default(autoincrement())
  name      String
  code      String
  gstNo     String
  country   Country @relation(fields: [countryId], references: [id])
  countryId Int
  city      City[]
  active    Boolean @default(true)
}

model City {
  id              Int        @id @default(autoincrement())
  name            String
  code            String
  state           State      @relation(fields: [stateId], references: [id])
  stateId         Int
  active          Boolean    @default(true)
  doctorLocalCity Employee[] @relation(name: "localCity")
  doctorPermCity  Employee[] @relation(name: "permCity")
  Party           Party[]
}

model Department {
  id        Int        @id @default(autoincrement())
  name      String
  code      String
  active    Boolean    @default(true)
  doctor    Employee[] @relation()
  Company   Company    @relation(fields: [companyId], references: [id])
  companyId Int
}

enum PageType {
  Masters
  Transactions
  Reports
  AdminAccess
}

model PageGroup {
  id     Int      @id @default(autoincrement())
  type   PageType
  name   String
  Page   Page[]
  active Boolean  @default(true)
}

enum PrefixCategory {
  Default
  Specific
}

enum BloodGroup {
  AP
  BP
  AN
  BN
  ABP
  ABN
  OP
  ON
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum MaritalStatus {
  SINGLE
  MARRIED
  SEPARATED
}

model PartyCategory {
  id        Int      @id @default(autoincrement())
  name      String
  code      String
  Company   Company? @relation(fields: [companyId], references: [id])
  companyId Int?
  active    Boolean  @default(true)
}

model Party {
  id                   Int              @id @default(autoincrement())
  name                 String
  code                 String?
  aliasName            String?
  displayName          String?
  address              String?
  City                 City?            @relation(fields: [cityId], references: [id])
  cityId               Int?
  pincode              Int?
  panNo                String?
  tinNo                String?
  cstNo                String?
  cstDate              DateTime?        @db.Date
  cinNo                String?
  faxNo                String?
  email                String?
  website              String?
  contactPersonName    String?
  gstNo                String?
  costCode             String?
  active               Boolean          @default(true)
  contactMobile        BigInt           @default(0)
  Company              Company          @relation(fields: [companyId], references: [id])
  companyId            Int
  yarn                 Boolean          @default(false)
  fabric               Boolean          @default(false)
  accessoryGroup       Boolean          @default(false)
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  createdBy            User             @relation("createdBy", fields: [createdById], references: [id])
  createdById          Int
  updatedBy            User?            @relation("updatedBy", fields: [updatedById], references: [id])
  updatedById          Int?
  isSupplier           Boolean?         @default(false)
  isCustomer           Boolean?         @default(false)
  PurchaseBillSupplier PurchaseBill[]   @relation(name: "supplier")
  SalesBillSupplier    SalesBill[]      @relation(name: "supplier")
  PurchaseReturn       PurchaseReturn[] @relation(name: "supplier")
  SalesReturn          SalesReturn[]    @relation(name: "supplier")
}

model ProductBrand {
  id             Int              @id @default(autoincrement())
  name           String?
  code           String?
  active         Boolean          @default(true)
  Company        Company?         @relation(fields: [companyId], references: [id])
  companyId      Int?
  Product        Product[]
  PoBillItems    PoBillItems[]
  SalesBillItems SalesBillItems[]
}

model ProductCategory {
  id             Int              @id @default(autoincrement())
  name           String?
  active         Boolean          @default(true)
  Company        Company?         @relation(fields: [companyId], references: [id])
  companyId      Int?
  Product        Product[]
  PoBillItems    PoBillItems[]
  SalesBillItems SalesBillItems[]
}

model Uom {
  id                     Int                      @id @default(autoincrement())
  name                   String?
  active                 Boolean                  @default(true)
  Company                Company?                 @relation(fields: [companyId], references: [id])
  companyId              Int?
  Product                Product[]
  ProductUomPriceDetails ProductUomPriceDetails[]
  PoBillItems            PoBillItems[]
  PoReturnItems          PoReturnItems[]
  Stock                  Stock[]
  SalesBillItems         SalesBillItems[]
  SalesReturn            SalesReturn[]
  SalesReturnItems       SalesReturnItems[]
}

model ProductUomPriceDetails {
  id              Int          @id @default(autoincrement())
  Product         Product      @relation(fields: [productId], references: [id])
  Uom             Uom?         @relation(fields: [uomId], references: [id])
  price           Float        @default(0)
  uomId           Int?
  productId       Int
  PoBillItems     PoBillItems? @relation(fields: [poBillItemsId], references: [id])
  poBillItemsId   Int?
  poReturnItemsId Int?
}

model Product {
  id                     Int                      @id @default(autoincrement())
  name                   String?
  code                   String?
  ProductBrand           ProductBrand?            @relation(fields: [productBrandId], references: [id])
  productBrandId         Int?
  ProductCategory        ProductCategory?         @relation(fields: [productCategoryId], references: [id])
  productCategoryId      Int?
  active                 Boolean                  @default(true)
  Company                Company?                 @relation(fields: [companyId], references: [id])
  companyId              Int?
  price                  Float?                   @default(0)
  PoBillItems            PoBillItems[]
  Stock                  Stock[]
  SalesBillItems         SalesBillItems[]
  PoReturnItems          PoReturnItems[]
  SalesReturnItems       SalesReturnItems[]
  uomId                  Int?
  Uom                    Uom?                     @relation(fields: [uomId], references: [id])
  ProductUomPriceDetails ProductUomPriceDetails[]
  ComboDetailProduct     ComboDetail[]            @relation(name: "Product")
  ComboDetailCompo       ComboDetail[]            @relation(name: "Compo")
  hsn                    String?                    @db.LongText  
  description            String?                   @db.LongText
}

model ComboDetail {
  id        Int     @id @default(autoincrement())
  comboId   Int
  product   Product @relation("Product", fields: [productId], references: [id], onDelete: Cascade)
  compo     Product @relation("Compo", fields: [compoId], references: [id], onDelete: Cascade) // Use a different field name for the "Compo" relation
  productId Int
  compoId   Int // Add a new field for the "Compo" relation
}

model PurchaseBill {
  id             Int              @id @default(autoincrement())
  supplier       Party?           @relation("supplier", fields: [supplierId], references: [id])
  supplierId     Int?
  supplierDcNo   String?
  branchId       Int?
  address        String?
  place          String?
  docId          String?
  createdAt      DateTime         @default(now())
  dueDate        DateTime         @db.Date
  active         Boolean          @default(true)
  Company        Company?         @relation(fields: [companyId], references: [id])
  companyId      Int?
  netBillValue   Int?
  PoBillItems    PoBillItems[]
  PurchaseReturn PurchaseReturn[]
}

model PoBillItems {
  id                     Int                      @id @default(autoincrement())
  PurchaseBill           PurchaseBill?            @relation(fields: [purchaseBillId], references: [id], onDelete: Cascade)
  purchaseBillId         Int?
  ProductBrand           ProductBrand?            @relation(fields: [productBrandId], references: [id])
  productBrandId         Int?
  ProductCategory        ProductCategory?         @relation(fields: [productCategoryId], references: [id])
  productCategoryId      Int?
  Product                Product?                 @relation(fields: [productId], references: [id])
  productId              Int?
  qty                    Float?
  price                  Float?
  PoReturnItems          PoReturnItems[]
  Uom                    Uom?                     @relation(fields: [uomId], references: [id])
  uomId                  Int?
  ProductUomPriceDetails ProductUomPriceDetails[]
  Stock                  Stock?
  stockQty               Float?
}

model PurchaseReturn {
  id             Int             @id @default(autoincrement())
  supplier       Party?          @relation("supplier", fields: [supplierId], references: [id])
  supplierId     Int?
  branchId       Int?
  address        String?
  place          String?
  docId          String?
  createdAt      DateTime?       @default(now())
  dueDate        DateTime?       @db.Date
  active         Boolean?        @default(true)
  Company        Company?        @relation(fields: [companyId], references: [id])
  companyId      Int?
  PurchaseBill   PurchaseBill    @relation(fields: [purchaseBillId], references: [id])
  purchaseBillId Int
  PoReturnItems  PoReturnItems[]
}

model PoReturnItems {
  id                  Int             @id @default(autoincrement())
  PurchaseReturn      PurchaseReturn? @relation(fields: [purchaseReturnId], references: [id], onDelete: Cascade)
  purchaseReturnId    Int?
  Product             Product?        @relation(fields: [productId], references: [id])
  productId           Int?
  PoBillItems         PoBillItems?    @relation(fields: [purchaseBillItemsId], references: [id])
  purchaseBillItemsId Int?
  qty                 Float?
  stockQty            Float?
  poQty               Float?
  Stock               Stock?
  Uom                 Uom?            @relation(fields: [uomId], references: [id])
  uomId               Int?
}

enum StockInOrOut {
  In
  Out
}

model Stock {
  id                 Int               @id @default(autoincrement())
  inOrOut            StockInOrOut?
  Product            Product?          @relation(fields: [productId], references: [id])
  productId          Int?
  qty                Float?
  PoBillItems        PoBillItems?      @relation(fields: [poBillItemsId], references: [id], onDelete: Cascade)
  poBillItemsId      Int?              @unique
  branchId           Int?
  SalesBillItems     SalesBillItems?   @relation(fields: [salesBillItemsId], references: [id], onDelete: Cascade)
  salesBillItemsId   Int?              @unique
  createdAt          DateTime?         @default(now())
  PoReturnItems      PoReturnItems?    @relation(fields: [poReturnItemsId], references: [id], onDelete: Cascade)
  poReturnItemsId    Int?              @unique
  SalesReturnItems   SalesReturnItems? @relation(fields: [salesReturnItemsId], references: [id], onDelete: Cascade)
  salesReturnItemsId Int?              @unique
  Uom                Uom?              @relation(fields: [uomId], references: [id])
  uomId              Int?
}

model SalesBill {
  id               Int              @id @default(autoincrement())
  supplier         Party?           @relation("supplier", fields: [supplierId], references: [id])
  supplierId       Int?
  branchId         Int?
  address          String?
  place            String?
  docId            String?
  createdAt        DateTime         @default(now())
  dueDate          DateTime?        @db.Date
  active           Boolean          @default(true)
  Company          Company?         @relation(fields: [companyId], references: [id])
  companyId        Int?
  SalesBillItems   SalesBillItems[]
  SalesReturn      SalesReturn[]
  empId            String?
  leadCategoriesId Int?
  isTaxBill        Boolean          @default(false)
}

model SalesBillItems {
  id                Int                @id @default(autoincrement())
  SalesBill         SalesBill?         @relation(fields: [salesBillId], references: [id], onDelete: Cascade)
  salesBillId       Int?
  ProductBrand      ProductBrand?      @relation(fields: [productBrandId], references: [id])
  productBrandId    Int?
  ProductCategory   ProductCategory?   @relation(fields: [productCategoryId], references: [id])
  productCategoryId Int?
  Product           Product?           @relation(fields: [productId], references: [id])
  productId         Int?
  qty               Float?
  price             Float?
  stockQty          Float?
  Stock             Stock?
  SalesReturnItems  SalesReturnItems[]
  Uom               Uom?               @relation(fields: [uomId], references: [id])
  uomId             Int?
  imeiNo            String?
  simNo             String?
  vehicleNo         String?
  tax               Int?
}

model SalesReturn {
  id               Int                @id @default(autoincrement())
  supplier         Party?             @relation("supplier", fields: [supplierId], references: [id])
  supplierId       Int?
  branchId         Int?
  address          String?
  place            String?
  docId            String?
  createdAt        DateTime?          @default(now())
  dueDate          DateTime?          @db.Date
  active           Boolean            @default(true)
  Company          Company?           @relation(fields: [companyId], references: [id])
  companyId        Int?
  SalesBill        SalesBill          @relation(fields: [salesBillId], references: [id])
  salesBillId      Int
  SalesReturnItems SalesReturnItems[]
  Uom              Uom?               @relation(fields: [uomId], references: [id])
  uomId            Int?
}

model SalesReturnItems {
  id               Int             @id @default(autoincrement())
  SalesReturn      SalesReturn?    @relation(fields: [salesReturnId], references: [id], onDelete: Cascade)
  salesReturnId    Int?
  Product          Product?        @relation(fields: [productId], references: [id])
  productId        Int?
  SalesBillItems   SalesBillItems? @relation(fields: [salesBillItemsId], references: [id])
  salesBillItemsId Int?
  qty              Float?
  stockQty         Float?
  salesQty         Float?
  Stock            Stock?
  Uom              Uom?            @relation(fields: [uomId], references: [id])
  uomId            Int?
}

model LeadCategories {
  id        Int      @id @default(autoincrement())
  name      String
  code      String?
  active    Boolean  @default(true)
  Company   Company? @relation(fields: [companyId], references: [id])
  companyId Int?
}
